// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: FleetManager/FleetManager.proto

/*
	Package FleetManager is a generated protocol buffer package.

	It is generated from these files:
		FleetManager/FleetManager.proto

	It has these top-level messages:
		Empty
		GetZoneReq
		GetZoneResp
		GetZonesResp
		GetFleetResp
		Zone
		Fleet
		Courier
*/
package FleetManager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{0} }

type GetZoneReq struct {
	Lat  float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Long float64 `protobuf:"fixed64,2,opt,name=long,proto3" json:"long,omitempty"`
}

func (m *GetZoneReq) Reset()                    { *m = GetZoneReq{} }
func (m *GetZoneReq) String() string            { return proto.CompactTextString(m) }
func (*GetZoneReq) ProtoMessage()               {}
func (*GetZoneReq) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{1} }

func (m *GetZoneReq) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *GetZoneReq) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

type GetZoneResp struct {
	ZoneId int32 `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
}

func (m *GetZoneResp) Reset()                    { *m = GetZoneResp{} }
func (m *GetZoneResp) String() string            { return proto.CompactTextString(m) }
func (*GetZoneResp) ProtoMessage()               {}
func (*GetZoneResp) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{2} }

func (m *GetZoneResp) GetZoneId() int32 {
	if m != nil {
		return m.ZoneId
	}
	return 0
}

type GetZonesResp struct {
	Zones []*Zone `protobuf:"bytes,1,rep,name=zones" json:"zones,omitempty"`
}

func (m *GetZonesResp) Reset()                    { *m = GetZonesResp{} }
func (m *GetZonesResp) String() string            { return proto.CompactTextString(m) }
func (*GetZonesResp) ProtoMessage()               {}
func (*GetZonesResp) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{3} }

func (m *GetZonesResp) GetZones() []*Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

type GetFleetResp struct {
	Fleet []*Fleet `protobuf:"bytes,1,rep,name=fleet" json:"fleet,omitempty"`
}

func (m *GetFleetResp) Reset()                    { *m = GetFleetResp{} }
func (m *GetFleetResp) String() string            { return proto.CompactTextString(m) }
func (*GetFleetResp) ProtoMessage()               {}
func (*GetFleetResp) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{4} }

func (m *GetFleetResp) GetFleet() []*Fleet {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type Zone struct {
	ZoneId  int32  `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	GeoJson string `protobuf:"bytes,2,opt,name=geoJson,proto3" json:"geoJson,omitempty"`
}

func (m *Zone) Reset()                    { *m = Zone{} }
func (m *Zone) String() string            { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()               {}
func (*Zone) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{5} }

func (m *Zone) GetZoneId() int32 {
	if m != nil {
		return m.ZoneId
	}
	return 0
}

func (m *Zone) GetGeoJson() string {
	if m != nil {
		return m.GeoJson
	}
	return ""
}

type Fleet struct {
	ZoneId int32      `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Fleet  []*Courier `protobuf:"bytes,2,rep,name=fleet" json:"fleet,omitempty"`
}

func (m *Fleet) Reset()                    { *m = Fleet{} }
func (m *Fleet) String() string            { return proto.CompactTextString(m) }
func (*Fleet) ProtoMessage()               {}
func (*Fleet) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{6} }

func (m *Fleet) GetZoneId() int32 {
	if m != nil {
		return m.ZoneId
	}
	return 0
}

func (m *Fleet) GetFleet() []*Courier {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type Courier struct {
	Id     int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Weight float64 `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Volume float64 `protobuf:"fixed64,4,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *Courier) Reset()                    { *m = Courier{} }
func (m *Courier) String() string            { return proto.CompactTextString(m) }
func (*Courier) ProtoMessage()               {}
func (*Courier) Descriptor() ([]byte, []int) { return fileDescriptorFleetManager, []int{7} }

func (m *Courier) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Courier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Courier) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Courier) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*GetZoneReq)(nil), "GetZoneReq")
	proto.RegisterType((*GetZoneResp)(nil), "GetZoneResp")
	proto.RegisterType((*GetZonesResp)(nil), "GetZonesResp")
	proto.RegisterType((*GetFleetResp)(nil), "GetFleetResp")
	proto.RegisterType((*Zone)(nil), "Zone")
	proto.RegisterType((*Fleet)(nil), "Fleet")
	proto.RegisterType((*Courier)(nil), "Courier")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FleetManager service

type FleetManagerClient interface {
	GetZone(ctx context.Context, in *GetZoneReq, opts ...grpc.CallOption) (*GetZoneResp, error)
	GetZones(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetZonesResp, error)
	GetFleet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFleetResp, error)
}

type fleetManagerClient struct {
	cc *grpc.ClientConn
}

func NewFleetManagerClient(cc *grpc.ClientConn) FleetManagerClient {
	return &fleetManagerClient{cc}
}

func (c *fleetManagerClient) GetZone(ctx context.Context, in *GetZoneReq, opts ...grpc.CallOption) (*GetZoneResp, error) {
	out := new(GetZoneResp)
	err := grpc.Invoke(ctx, "/FleetManager/GetZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerClient) GetZones(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetZonesResp, error) {
	out := new(GetZonesResp)
	err := grpc.Invoke(ctx, "/FleetManager/GetZones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerClient) GetFleet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFleetResp, error) {
	out := new(GetFleetResp)
	err := grpc.Invoke(ctx, "/FleetManager/GetFleet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FleetManager service

type FleetManagerServer interface {
	GetZone(context.Context, *GetZoneReq) (*GetZoneResp, error)
	GetZones(context.Context, *Empty) (*GetZonesResp, error)
	GetFleet(context.Context, *Empty) (*GetFleetResp, error)
}

func RegisterFleetManagerServer(s *grpc.Server, srv FleetManagerServer) {
	s.RegisterService(&_FleetManager_serviceDesc, srv)
}

func _FleetManager_GetZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).GetZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FleetManager/GetZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).GetZone(ctx, req.(*GetZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManager_GetZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).GetZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FleetManager/GetZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).GetZones(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManager_GetFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).GetFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FleetManager/GetFleet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).GetFleet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FleetManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FleetManager",
	HandlerType: (*FleetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetZone",
			Handler:    _FleetManager_GetZone_Handler,
		},
		{
			MethodName: "GetZones",
			Handler:    _FleetManager_GetZones_Handler,
		},
		{
			MethodName: "GetFleet",
			Handler:    _FleetManager_GetFleet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FleetManager/FleetManager.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetZoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetZoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lat != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if m.Long != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Long))))
		i += 8
	}
	return i, nil
}

func (m *GetZoneResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetZoneResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ZoneId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFleetManager(dAtA, i, uint64(m.ZoneId))
	}
	return i, nil
}

func (m *GetZonesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetZonesResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for _, msg := range m.Zones {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFleetManager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetFleetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFleetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fleet) > 0 {
		for _, msg := range m.Fleet {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFleetManager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Zone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Zone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ZoneId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFleetManager(dAtA, i, uint64(m.ZoneId))
	}
	if len(m.GeoJson) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleetManager(dAtA, i, uint64(len(m.GeoJson)))
		i += copy(dAtA[i:], m.GeoJson)
	}
	return i, nil
}

func (m *Fleet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fleet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ZoneId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFleetManager(dAtA, i, uint64(m.ZoneId))
	}
	if len(m.Fleet) > 0 {
		for _, msg := range m.Fleet {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFleetManager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Courier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Courier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFleetManager(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleetManager(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Weight))))
		i += 8
	}
	if m.Volume != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Volume))))
		i += 8
	}
	return i, nil
}

func encodeVarintFleetManager(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetZoneReq) Size() (n int) {
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Long != 0 {
		n += 9
	}
	return n
}

func (m *GetZoneResp) Size() (n int) {
	var l int
	_ = l
	if m.ZoneId != 0 {
		n += 1 + sovFleetManager(uint64(m.ZoneId))
	}
	return n
}

func (m *GetZonesResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovFleetManager(uint64(l))
		}
	}
	return n
}

func (m *GetFleetResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Fleet) > 0 {
		for _, e := range m.Fleet {
			l = e.Size()
			n += 1 + l + sovFleetManager(uint64(l))
		}
	}
	return n
}

func (m *Zone) Size() (n int) {
	var l int
	_ = l
	if m.ZoneId != 0 {
		n += 1 + sovFleetManager(uint64(m.ZoneId))
	}
	l = len(m.GeoJson)
	if l > 0 {
		n += 1 + l + sovFleetManager(uint64(l))
	}
	return n
}

func (m *Fleet) Size() (n int) {
	var l int
	_ = l
	if m.ZoneId != 0 {
		n += 1 + sovFleetManager(uint64(m.ZoneId))
	}
	if len(m.Fleet) > 0 {
		for _, e := range m.Fleet {
			l = e.Size()
			n += 1 + l + sovFleetManager(uint64(l))
		}
	}
	return n
}

func (m *Courier) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFleetManager(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleetManager(uint64(l))
	}
	if m.Weight != 0 {
		n += 9
	}
	if m.Volume != 0 {
		n += 9
	}
	return n
}

func sovFleetManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFleetManager(x uint64) (n int) {
	return sovFleetManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetZoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetZoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetZoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Long = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetZoneResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetZoneResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetZoneResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			m.ZoneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetZonesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetZonesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetZonesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleetManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &Zone{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFleetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFleetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFleetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleetManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleet = append(m.Fleet, &Fleet{})
			if err := m.Fleet[len(m.Fleet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Zone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			m.ZoneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleetManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fleet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fleet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fleet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			m.ZoneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleetManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleet = append(m.Fleet, &Courier{})
			if err := m.Fleet[len(m.Fleet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Courier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Courier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Courier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleetManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Weight = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Volume = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFleetManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleetManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFleetManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFleetManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleetManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFleetManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFleetManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFleetManager(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFleetManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFleetManager   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("FleetManager/FleetManager.proto", fileDescriptorFleetManager) }

var fileDescriptorFleetManager = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x14, 0x64, 0x9d, 0xd8, 0x0e, 0xcf, 0x49, 0x14, 0xf6, 0x00, 0x56, 0x88, 0x4c, 0xb4, 0x07, 0x14,
	0x01, 0x5a, 0x8b, 0x84, 0x0b, 0x9c, 0x10, 0x08, 0x10, 0x48, 0x5c, 0x7c, 0x44, 0x42, 0xc8, 0x28,
	0x5b, 0xd7, 0x92, 0xb3, 0xeb, 0xda, 0x9b, 0x56, 0xed, 0xb1, 0xbf, 0xd0, 0x4b, 0x3f, 0xa2, 0x1f,
	0xd2, 0x63, 0xa5, 0xfe, 0x40, 0x95, 0xf6, 0x43, 0xaa, 0x7d, 0xb6, 0x53, 0xf7, 0x90, 0xdb, 0xce,
	0xbc, 0x37, 0x3b, 0xde, 0x19, 0xc3, 0xab, 0xef, 0x99, 0x10, 0xfa, 0x77, 0x2c, 0xe3, 0x44, 0x14,
	0x61, 0x1b, 0xf0, 0xbc, 0x50, 0x5a, 0x8d, 0x27, 0x89, 0x52, 0x49, 0x26, 0xc2, 0x38, 0x4f, 0xc3,
	0x58, 0x4a, 0xa5, 0x63, 0x9d, 0x2a, 0x59, 0x56, 0x53, 0xe6, 0x82, 0xfd, 0x6d, 0x95, 0xeb, 0x63,
	0x36, 0x07, 0xf8, 0x21, 0xf4, 0x1f, 0x25, 0x45, 0x24, 0x0e, 0xe8, 0x08, 0x3a, 0x59, 0xac, 0x7d,
	0x32, 0x25, 0x33, 0x12, 0x99, 0x23, 0xa5, 0xd0, 0xcd, 0x94, 0x4c, 0x7c, 0x0b, 0x29, 0x3c, 0xb3,
	0xd7, 0xe0, 0x6d, 0x35, 0x65, 0x4e, 0x5f, 0x80, 0x7b, 0xa2, 0xa4, 0xf8, 0x97, 0x2e, 0x51, 0x68,
	0x47, 0x8e, 0x81, 0x3f, 0x97, 0xec, 0x2d, 0xf4, 0xeb, 0xbd, 0x12, 0x17, 0x5f, 0x82, 0x6d, 0x26,
	0xa5, 0x4f, 0xa6, 0x9d, 0x99, 0x37, 0xb7, 0x39, 0x5e, 0x51, 0x71, 0xec, 0x1d, 0x2e, 0xe3, 0x43,
	0x70, 0x79, 0x02, 0xf6, 0x9e, 0x01, 0xf5, 0xb2, 0xc3, 0xab, 0x51, 0x45, 0xb2, 0x8f, 0xd0, 0x35,
	0xe2, 0x9d, 0xde, 0xd4, 0x07, 0x37, 0x11, 0xea, 0x57, 0xa9, 0x24, 0x7e, 0xfa, 0xd3, 0xa8, 0x81,
	0xec, 0x33, 0xd8, 0x78, 0xd5, 0x6e, 0x6d, 0xd0, 0x58, 0x5b, 0x68, 0xdd, 0xe3, 0x5f, 0xd5, 0xba,
	0x48, 0x45, 0xd1, 0x98, 0xff, 0x05, 0xb7, 0x66, 0xe8, 0x10, 0xac, 0xad, 0xdc, 0x4a, 0x97, 0x26,
	0x2e, 0x19, 0xaf, 0x44, 0xed, 0x89, 0x67, 0xfa, 0x1c, 0x9c, 0x23, 0x91, 0x26, 0xfb, 0xda, 0xef,
	0x60, 0x88, 0x35, 0x32, 0xfc, 0xa1, 0xca, 0xd6, 0x2b, 0xe1, 0x77, 0x2b, 0xbe, 0x42, 0xf3, 0x0b,
	0x02, 0xfd, 0x76, 0xa1, 0x74, 0x01, 0x6e, 0x9d, 0x23, 0xf5, 0xf8, 0x43, 0x5b, 0xe3, 0x3e, 0x6f,
	0xd5, 0xc0, 0x06, 0xa7, 0xd7, 0x77, 0x67, 0x96, 0x4b, 0xed, 0xd0, 0x3c, 0x83, 0xbe, 0x87, 0x5e,
	0x13, 0x3e, 0x75, 0x38, 0x96, 0x3d, 0x1e, 0xf0, 0x76, 0x1f, 0x6c, 0x88, 0x8a, 0x1e, 0x75, 0x50,
	0x51, 0xd2, 0x0f, 0x28, 0xa9, 0xc2, 0x79, 0x24, 0xd9, 0xb6, 0xc2, 0x9e, 0xa1, 0xc4, 0x63, 0x4e,
	0x88, 0x51, 0x7c, 0x22, 0x6f, 0xbe, 0x8c, 0x2e, 0x37, 0x01, 0xb9, 0xda, 0x04, 0xe4, 0x66, 0x13,
	0x90, 0xf3, 0xdb, 0xe0, 0xc9, 0x7f, 0x07, 0xff, 0xb1, 0xc5, 0x7d, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xda, 0x89, 0xd2, 0x72, 0xa4, 0x02, 0x00, 0x00,
}
