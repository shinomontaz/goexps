// Code generated by protoc-gen-go-http-server. DO NOT EDIT.
// source: FleetManager/FleetManager.proto

package FleetManager

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"gitlab.ozon.ru/platform/protobuf/protoc-gen-go-http-server/types"
)

func init() {
	defaultHTTPServerOptions.cdc = &Codec{}
}

type Codec struct {
}

func (c *Codec) ReadRequest(req *http.Request) (*http.Request, string, interface{}, error) {
	if data, ok := _FromContext(req.Context()); ok {
		return req, data.method, data.request, nil
	}
	defer req.Body.Close()
	components := strings.Split(strings.Trim(req.URL.Path, "/"), "/")
	l := len(components)
	var verb string

	if idx := strings.LastIndex(components[l-1], ":"); idx == 0 {
		return req, "", nil, types.ErrMethodNotFound
	} else if idx > 0 {
		c := components[l-1]
		components[l-1], verb = c[:idx], c[idx+1:]
	}
	if dataMap, err := pattern__GetZone_0.Match(components, verb); err == nil {
		if req.Method != "GET" {
			return req, "", nil, types.ErrMethodNotFound
		}
		data := &GetZoneReq{}
		if req.Method == "GET" {
			for k, v := range dataMap {
				runtime.PopulateFieldFromPath(data, k, v)
			}
		} else {
			decoder := json.NewDecoder(req.Body)
			err := decoder.Decode(data)
			req.Body.Close()
			if err != nil {
				return req, "", nil, fmt.Errorf("Could not decode request: %s, ", err)
			}
		}
		return req.WithContext(_NewContext(req.Context(), &_CodecData{
			method:  "GetZone",
			request: data,
		})), "GetZone", data, nil
	}

	if idx := strings.LastIndex(components[l-1], ":"); idx == 0 {
		return req, "", nil, types.ErrMethodNotFound
	} else if idx > 0 {
		c := components[l-1]
		components[l-1], verb = c[:idx], c[idx+1:]
	}
	if dataMap, err := pattern__GetZones_0.Match(components, verb); err == nil {
		if req.Method != "GET" {
			return req, "", nil, types.ErrMethodNotFound
		}
		data := &Empty{}
		if req.Method == "GET" {
			for k, v := range dataMap {
				runtime.PopulateFieldFromPath(data, k, v)
			}
		} else {
			decoder := json.NewDecoder(req.Body)
			err := decoder.Decode(data)
			req.Body.Close()
			if err != nil {
				return req, "", nil, fmt.Errorf("Could not decode request: %s, ", err)
			}
		}
		return req.WithContext(_NewContext(req.Context(), &_CodecData{
			method:  "GetZones",
			request: data,
		})), "GetZones", data, nil
	}

	if idx := strings.LastIndex(components[l-1], ":"); idx == 0 {
		return req, "", nil, types.ErrMethodNotFound
	} else if idx > 0 {
		c := components[l-1]
		components[l-1], verb = c[:idx], c[idx+1:]
	}
	if dataMap, err := pattern__GetFleet_0.Match(components, verb); err == nil {
		if req.Method != "POST" {
			return req, "", nil, types.ErrMethodNotFound
		}
		data := &Empty{}
		if req.Method == "GET" {
			for k, v := range dataMap {
				runtime.PopulateFieldFromPath(data, k, v)
			}
		} else {
			decoder := json.NewDecoder(req.Body)
			err := decoder.Decode(data)
			req.Body.Close()
			if err != nil {
				return req, "", nil, fmt.Errorf("Could not decode request: %s, ", err)
			}
		}
		return req.WithContext(_NewContext(req.Context(), &_CodecData{
			method:  "GetFleet",
			request: data,
		})), "GetFleet", data, nil
	}

	return req, "", nil, types.ErrMethodNotFound
}

func (c *Codec) WriteResponse(w http.ResponseWriter, resp interface{}, err error) error {
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		bResp, _ := json.Marshal(&defaultError{Error: err.Error()})
		_, err = w.Write(bResp)
		return err
	}
	bResp, err := json.Marshal(resp)
	if err != nil {
		return err
	}
	_, err = w.Write(bResp)
	return err
}

type _CodecData struct {
	method  string
	request interface{}
}

type _CtxKeyType int

var _CtxKey _CtxKeyType

func _NewContext(ctx context.Context, d *_CodecData) context.Context {
	return context.WithValue(ctx, _CtxKey, d)
}

func _FromContext(ctx context.Context) (*_CodecData, bool) {
	data := ctx.Value(_CtxKey)
	if data == nil {
		return nil, false
	}
	d, ok := data.(*_CodecData)
	return d, ok
}

type defaultError struct {
	Error string `json:"error"`
}

var (
	pattern__GetZone_0  = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"zone"}, ""))
	pattern__GetZones_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"zones"}, ""))
	pattern__GetFleet_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"fleet"}, ""))
)
